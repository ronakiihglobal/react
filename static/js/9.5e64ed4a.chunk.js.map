{"version":3,"sources":["PostList.js"],"names":["TitlebarGridList","props","_this","Object","_var_www_html_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_var_www_html_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_var_www_html_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","postList","editId","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","storedPost","localStorage","hasOwnProperty","JSON","parse","getItem","loadPostFromStorage","setItem","stringify","posts","id","setState","deletePost","_this2","classes","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react_router__WEBPACK_IMPORTED_MODULE_8__","to","concat","className","createButton","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","style","textDecoration","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_9___default","variant","color","root","_material_ui_core_GridList__WEBPACK_IMPORTED_MODULE_11___default","cellHeight","gridList","_material_ui_core_GridListTile__WEBPACK_IMPORTED_MODULE_12___default","key","cols","height","_material_ui_core_ListSubheader__WEBPACK_IMPORTED_MODULE_14___default","component","map","tile","index","gridListItem","src","file","alt","title","_material_ui_core_GridListTileBar__WEBPACK_IMPORTED_MODULE_13___default","subtitle","description","actionIcon","width","_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_15___default","onClick","handleEdit","icon","_material_ui_icons_Edit__WEBPACK_IMPORTED_MODULE_16___default","handleDelete","_material_ui_icons_Delete__WEBPACK_IMPORTED_MODULE_17___default","Component","connect","dispatch","type","payload","reset","withStyles","theme","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","marginBottom"],"mappings":"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","file":"static/js/9.5e64ed4a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport { Redirect } from 'react-router';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\n\nconst styles = theme => ({\n  root: {\n    //display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n\n  },\n  gridList: {\n    //width: 1500,\n    //height: 450,\n\n\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)',\n  },\n  createButton:{\n  \tmarginBottom:30,\n  },\n  gridListItem:{\n  \tmarginBottom:20,\n  }\n});\n\n \nclass TitlebarGridList extends Component{\n\t\n\tconstructor(props){\n\t    super(props);\n\t    this.state = {\n\t      \tpostList: [],\n\t      \teditId:''\n\t    }\n\n  \t}\n\n\n  \tcomponentDidMount() {\n\t    this.hydrateStateWithLocalStorage();\n\t    window.addEventListener(\n\t      \"beforeunload\",\n\t      this.saveStateToLocalStorage.bind(this)\n\t    );\n  \t}\n\n  \tcomponentWillUnmount() {\n\t    window.removeEventListener(\n\t      \"beforeunload\",\n\t      this.saveStateToLocalStorage.bind(this)\n\t    );\n\n\t    this.saveStateToLocalStorage();\n  \t}\n\n  \thydrateStateWithLocalStorage() {\n\t    let storedPost = [];\n\t    if (localStorage.hasOwnProperty('posts')) {\n\t      storedPost = JSON.parse(localStorage.getItem('posts'));\n\t    }\n\t    this.props.loadPostFromStorage(storedPost);\n  \t}\n\n  \tsaveStateToLocalStorage() {\n\t    localStorage.setItem('posts', JSON.stringify(this.props.posts));\n\t}\n\n  \t\n\n  \thandleEdit(id){\n  \t\tthis.setState({'editId':id})\n  \t}\n\n  \thandleDelete(id){\n  \t\tthis.props.deletePost(id);\n  \t}\n\n\trender() {\n\t  const { classes } = this.props;\n\n\t  \tif (this.state.editId !== '') {\n\t      \treturn <Redirect to={`/post/${this.state.editId}/edit`} />\n    \t}\n\n\t  return (\n\t  \t<div>\n\t\t  \t\n\t\t  \t<div className={classes.createButton}>\n\t\t    \t<Link style={{ textDecoration: 'none' }} to='/post/create'><Button variant=\"contained\" color=\"primary\">Create Post</Button></Link>\n\t\t    </div>\n\n\t    <div className={classes.root}>\n\t    \n\n\t      <GridList cellHeight={500} className={classes.gridList}>\n\t        <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\n\t          <ListSubheader component=\"div\">Post List</ListSubheader>\n\t        </GridListTile>\n\t        {this.props.posts.map((tile,index) => (\n\t          <GridListTile key={index} className={classes.gridListItem}>\n\t            <img src={tile.file} alt={tile.title} />\n\t            <GridListTileBar\n\t              title={tile.title}\n\t              subtitle={<span>Description: {tile.description}</span>}\n\t              actionIcon={\n\t              \t<div style={{width:\"100px\"}}>\n\t                <IconButton onClick={() => this.handleEdit(tile.id)} className={classes.icon}>\n\t                  <EditIcon  />\n\t                </IconButton>\n\n\t                <IconButton onClick={() => this.handleDelete(tile.id)} className={classes.icon}>\n\t                  <DeleteIcon  />\n\t                </IconButton>\n\t                </div>\n\t              }\n\t            />\n\t          </GridListTile>\n\t        ))}\n\t      </GridList>\n\t    </div>\n\t    </div>\n\t  );\n\t}\t\n} \n\n\n\nTitlebarGridList.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.posts\n  }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deletePost: (id) => dispatch({ type: 'DELETEPOST' , payload:id}),\n    reset: () => dispatch({ type: 'RESET'}),\n    loadPostFromStorage: (posts) => dispatch({ type: 'LOADPOST' , payload:posts}),\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(TitlebarGridList));\n\n\n//export default withStyles(styles)(TitlebarGridList);"],"sourceRoot":""}